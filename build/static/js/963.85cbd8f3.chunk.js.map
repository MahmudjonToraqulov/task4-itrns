{"version":3,"file":"static/js/963.85cbd8f3.chunk.js","mappings":"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","sources":["components/home/index.jsx"],"sourcesContent":["\nimport React, { useEffect, useRef, useState } from 'react';\nimport { db, auth } from '../../firebase/firebase';\nimport { collection, query, onSnapshot, updateDoc, doc, deleteDoc } from \"firebase/firestore\";\nimport { faLock, faUnlock, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {  useNavigate } from 'react-router-dom'\nimport { onAuthStateChanged, signOut } from 'firebase/auth';\nimport { deleteUser as firebaseDeleteUser } from 'firebase/auth';\nimport { useAuth } from '../../contexts/authContext';\n\n\n\n\n\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [selectedUsers, setSelectedUsers] = useState(new Set());\n  const selectAllRef = useRef(null); \n  const [currentUserId, setCurrentUserId] = useState(null); // State for current user ID\n  \n  useEffect(() => {\n    const unsubscribeAuth = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setCurrentUserId(user.uid); // Set current user ID\n      } else {\n        setCurrentUserId(null); // User is signed out\n      }\n    });\n\n    const q = query(collection(db, \"users\"));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const usersData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      setUsers(usersData);\n    });\n\n    return () => {\n      unsubscribe();\n      unsubscribeAuth(); // Clean up auth listener\n    };\n  }, []);\n\n\n\n  // useEffect(() => {\n  //   const q = query(collection(db, \"users\"));\n  //   const unsubscribe = onSnapshot(q, (snapshot) => {\n  //     const usersData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n  //     setUsers(usersData);\n  //   });\n  //   return () => unsubscribe();\n  // }, []);\n\n  const toggleUserSelection = (id) => {\n    const newSelectedUsers = new Set(selectedUsers);\n    if (newSelectedUsers.has(id)) {\n      newSelectedUsers.delete(id);\n    } else {\n      newSelectedUsers.add(id);\n    }\n    setSelectedUsers(newSelectedUsers);\n  };\n\n\n  const blockUser = async (userId) => {\n    await updateDoc(doc(db, \"users\", userId), { status: 'blocked' });\n    if (userId === currentUserId) {\n        await signOut(auth); // Log out the current user\n        navigate('/login'); // Redirect to login\n    }\n  };\n\n  const unblockUser = async (userId) => {\n    await updateDoc(doc(db, \"users\", userId), { status: 'active' });\n  };\n\n  const deleteUser = async (userId) => {\n    const currentUser = auth.currentUser; // Get the current user\n  \n    if (!currentUser) {\n      throw new Error('No user is currently logged in.');\n    }\n  \n    try {\n      // Delete user document from Firestore\n      await deleteDoc(doc(db, \"users\", userId));\n  \n      // If the user to be deleted is the current user\n      if (userId === currentUser.uid) {\n        // Delete user from Firebase Authentication\n        await firebaseDeleteUser(currentUser);\n        \n        // Log out the user\n        await signOut(auth);\n        \n        // Redirect to login page\n        navigate('/login'); \n      }\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      throw new Error('Failed to delete user account. ' + error.message);\n    }\n  };\n  \n\n  \n\n  const toggleSelectAll = () => {\n    if (selectedUsers.size === users.length) {\n      setSelectedUsers(new Set()); // Deselect all\n    } else {\n      const allUserIds = new Set(users.map(user => user.id));\n      setSelectedUsers(allUserIds); // Select all\n    }\n    console.log(selectedUsers);\n  };\n\n  useEffect(() => {\n    if (selectAllRef.current) {\n      // Update the indeterminate property based on selectedUsers state\n      selectAllRef.current.indeterminate = selectedUsers.size > 0 && selectedUsers.size < users.length;\n    }\n  }, [selectedUsers, users.length]); \n\n  users.sort((a, b) => {\n    return b.lastLoginTime.toMillis() - a.lastLoginTime.toMillis();\n  })\n \n\n  return (\n    <div className='container mt-20 mx-auto'>\n      <h2 className='my-2 text-3xl text-green-700'>User Management</h2>\n      <table className=\"table w-full border-collapse border border-2 border-slate-500 border-spacing-2  hover:border-spacing-2mt-6 mb-2\">\n        <thead>\n          <tr>\n            <th className=\"border border-slate-600 border-2 p-5 \t\">\n                <input \n                    className='scale-150' \n                    type=\"checkbox\" \n                    onChange={toggleSelectAll}\n                    checked={selectedUsers.size === users.length}\n                    ref={selectAllRef}\n                />\n            </th>\n            <th className=\"border border-slate-600 border-2 px-2 text-lg\" >Name</th>\n            <th className=\"border border-slate-600 border-2 text-lg\">Email</th>\n            <th className=\"border border-slate-600 border-2 text-lg\">Last Login</th>\n            <th className=\"border border-slate-600 border-2 text-lg\">Registration Time</th>\n            <th className=\"border border-slate-600 border-2 text-lg\">Status</th>\n            <th className=\"border border-slate-600 border-2 text-lg\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n           {users.map(user => (\n            <tr key={user.id}>\n              <td className='text-center border border-slate-600 p-5 border-2 '><input className='scale-150' type=\"checkbox\"  onChange={() => toggleUserSelection(user.id)} checked={selectedUsers.has(user.id)} /></td>\n              <td className='text-center border border-slate-600 p-2 border-2'>{user.name}</td>\n              <td className='text-center border border-slate-600 p-2 border-2'>{user.email}</td>\n              <td className='text-center border border-slate-600 p-2 border-2'>{ user.lastLoginTime?.toDate().toString() }</td> \n              <td className='text-center border border-slate-600 p-2 border-2'>{ user.registrationTime?.toDate().toString() }</td>\n              <td className={user.status === 'active' ? 'text-center border border-slate-700 p-2 border-2 text-lg font-semibold text-green-700' : 'text-center border border-slate-700 p-2 border-2 text-lg font-semibold text-red-700\t'} >{user.status}</td>\n              <td className='text-center border border-slate-600 p-2  flex'>\n                <button className={user.status === 'active' ? \"mx-1 my-1 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" : \"mx-1 my-1 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\"} onClick={() => user.status === 'active' ? blockUser(user.id) : unblockUser(user.id)}>{user.status === 'active' ? (\n                    'Block'\n                  ) : (\n                    <FontAwesomeIcon icon={faUnlock} title=\"Unblock\" />\n                  )}</button>\n                <button className=\"mx-1 my-1 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" onClick={() => deleteUser(user.id)}>Delete</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div className='flex items-center justify-between '>\n        <div>\n          <button className=\"mx-1 my-1 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" onClick={() => selectedUsers.forEach(blockUser)}>Block Selected</button>\n          <button className=\"mx-1 my-1 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\" onClick={() => selectedUsers.forEach(unblockUser)}><FontAwesomeIcon icon={faUnlock} title=\"Unblock\" /></button>\n          <button className=\"mx-1 my-1 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" onClick={() => selectedUsers.forEach(deleteUser)}>Delete Selected</button>\n        </div>\n        <h2 className='text-white text-lg p-2 bg-indigo-500'> Current User - { currentUser.email } </h2>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n\n"],"names":["Home","navigate","useNavigate","currentUser","useAuth","users","setUsers","useState","selectedUsers","setSelectedUsers","Set","selectAllRef","useRef","currentUserId","setCurrentUserId","useEffect","unsubscribeAuth","onAuthStateChanged","auth","user","uid","q","query","collection","db","unsubscribe","onSnapshot","snapshot","usersData","docs","map","doc","id","data","blockUser","async","updateDoc","userId","status","signOut","unblockUser","deleteUser","Error","deleteDoc","firebaseDeleteUser","error","console","message","current","indeterminate","size","length","sort","a","b","lastLoginTime","toMillis","_jsxs","className","children","_jsx","type","onChange","toggleSelectAll","allUserIds","log","checked","ref","_user$lastLoginTime","_user$registrationTim","newSelectedUsers","has","delete","add","toggleUserSelection","name","email","toDate","toString","registrationTime","onClick","FontAwesomeIcon","icon","faUnlock","title","forEach"],"sourceRoot":""}